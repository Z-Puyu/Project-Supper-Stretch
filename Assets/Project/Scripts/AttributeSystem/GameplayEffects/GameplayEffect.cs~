using System.Collections.Generic;
using System.Linq;
using Project.Scripts.AttributeSystem.Modifiers;
using Project.Scripts.Util.Visitor;
using UnityEngine;

namespace Project.Scripts.AttributeSystem.GameplayEffects;

/// <summary>
/// A gameplay effect that can be applied to an <see cref="AttributeSet"/>.
/// Each gameplay effect asset defines a set of parameters which are used to generate changes in attributes in run-time.
/// </summary>
public abstract class GameplayEffect : ScriptableObject, IVisitor<AttributeSet> {
    /// <summary>
    /// Invoke the gameplay effect to produce a set of modifiers.
    /// </summary>
    /// <param name="instigator">The instigator of the effect.</param>
    /// <param name="target">The target on which the modifiers generated by the effect should be applied.</param>
    /// <param name="magnitudes">The magnitudes of the modifiers supplied by the instigator.</param>
    /// <param name="chance">The chance of the modifiers being applied.</param>
    /// <returns>The modifiers to apply to <paramref name="target"/></returns>
    public abstract IEnumerable<Modifier> Invoke(
        AttributeSet? instigator, AttributeSet target, IReadOnlyDictionary<string, int> magnitudes, int chance = 100
    );

    public abstract void Visit(AttributeSet attributes);
}
